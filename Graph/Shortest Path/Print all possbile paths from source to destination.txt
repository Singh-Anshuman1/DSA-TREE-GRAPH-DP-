// since we have to explore all paths we will use concept of backtracking
class Solution {
public:
    void dfs(vector<int>adj[],vector<int>&vis,vector<int>&path,vector<vector<int>>&ans,int node,int n)
    {
        path.push_back(node);
        vis[node]=1;
        if(node==n-1)
        {
        ans.push_back(path);
        }
        else
{
        for(auto it:adj[node])
        {
            if(!vis[it])
            dfs(adj,vis,path,ans,it,n);
        }
}
vis[node]=0;
path.pop_back();


    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int>adj[n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<graph[i].size();j++)
            adj[i].push_back(graph[i][j]);
        }
        vector<vector<int>>ans;
        vector<int>path;
        vector<int>vis(n,0);
        dfs(adj,vis,path,ans,0,n);
        return ans;
        
    }
};