class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int,int>>adj[n];
        for(int i=0;i<flights.size();i++)
        {
            adj[flights[i][0]].push_back({flights[i][1],flights[i][2]});
        }
        vector<int>dist(n,1e9);
        dist[src]=0;
        queue<pair<int,pair<int,int>>>qu;
        qu.push({0,{src,0}});
        while(!qu.empty())
        {
            
            int stop=qu.front().first;
            int node=qu.front().second.first;
            int dis=qu.front().second.second;
            qu.pop();
            if(stop>k)
            continue;
            for(auto it:adj[node])
            {
                int adjNode=it.first;
                int dis1=it.second;
                if(dis+dis1<dist[adjNode]&&stop<=k)
                {
                    dist[adjNode]=dis+dis1;
                    qu.push({stop+1,{adjNode,dist[adjNode]}});
                }
            }
        }
        if(dist[dst]==1e9)
        return -1;
        else
        return dist[dst];
        
    }
};s