//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        // Creating an adjacency list
        vector<pair<int,int>>adj[n+1];
        for(int i=0;i<edges.size();i++)
        {
                adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});
                adj[edges[i][1]].push_back({edges[i][0],edges[i][2]});
                
            
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        vector<int>path(n+1);
        for(int i=1;i<=n;i++)
        path[i]=i;
        vector<int>dist(n+1,1e9);
        dist[1]=0;
        pq.push({1,0});
        while(!pq.empty())
        {
            int node=pq.top().first;
            int dis=pq.top().second;
            pq.pop();
            for(auto it:adj[node])
            {
                int node1=it.first;
                int dis1=it.second;
                if(dis+dis1<dist[node1])
                {
                    dist[node1]=dis+dis1;
                    pq.push({node1,dist[node1]});
                    path[node1]=node;
                }
                
            }
        }
        if(dist[n]==1e9)
        return {-1};
        vector<int>ans;
        int trace=n;
        while(path[trace]!=trace)
        {
            ans.push_back(trace);
            trace=path[trace];
        }
        ans.push_back(1);
        reverse(ans.begin(),ans.end());
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    // your code goes here
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        map<pair<int,int>,int> mp;
        for (int i = 0; i < m; ++i) {
            vector<int> temp;
            for (int j = 0; j < 3; ++j) {
                int x;
                cin >> x;
                temp.push_back(x);
            }
            edges.push_back(temp);
            mp[{edges.back()[0],edges.back()[1]}] = edges.back()[2];
            mp[{edges.back()[1],edges.back()[0]}] = edges.back()[2];
        }

        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        int ans=0;
        for(int i=2;i<res.size();i++)
        {
            ans+=mp[{res[i],res[i-1]}];
        }
        if(res.size()==1 && res[0]==-1) ans=res[0];
        cout<<ans<<endl;
    }
}

// } Driver Code Ends