class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        
        int n=grid.size();
        if(grid[0][0]==1||grid[n-1][n-1]==1)
        return -1;
        vector<vector<int>>dist(n,vector<int>(n,1e9));
        dist[0][0]=1;
        queue<pair<int,pair<int,int>>>qu;
        qu.push({1,{0,0}});
        while(!qu.empty())
        {
            int dis=qu.front().first;
            int row=qu.front().second.first;
            int col=qu.front().second.second;
            qu.pop();
            int row1=row+1;
            int col1=col;
            int row2=row-1;
            int col2=col;
            int row3=row;
            int col3=col+1;
            int row4=row;
            int col4=col-1;
            int row5=row+1;
            int col5=col+1;
            int row6=row-1;
            int col6=col-1;
            int row7=row+1;
            int col7=col-1;
            int row8=row-1;
            int col8=col+1;
            if((row1>=0&&row1<n)&&(col1>=0&&col1<n)&&grid[row1][col1]==0&&(dis+1<dist[row1][col1]))
            {
            qu.push({dis+1,{row1,col1}});
            dist[row1][col1]=dis+1;
            }
            if((row2>=0&&row2<n)&&(col2>=0&&col2<n)&&grid[row2][col2]==0&&(dis+1<dist[row2][col2]))
            {
            qu.push({dis+1,{row2,col2}});
            dist[row2][col2]=dis+1;
            }
            if((row3>=0&&row3<n)&&(col3>=0&&col3<n)&&grid[row3][col3]==0&&(dis+1<dist[row3][col3]))
            {
            qu.push({dis+1,{row3,col3}});
            dist[row3][col3]=dis+1;
            }
             if((row4>=0&&row4<n)&&(col4>=0&&col4<n)&&grid[row4][col4]==0&&(dis+1<dist[row4][col4]))
             {
            qu.push({dis+1,{row4,col4}});
            dist[row4][col4]=dis+1;
                         }
             if((row5>=0&&row5<n)&&(col5>=0&&col5<n)&&grid[row5][col5]==0&&(dis+1<dist[row5][col5]))
             {
            qu.push({dis+1,{row5,col5}});
            dist[row5][col5]=dis+1;
             }
             if((row6>=0&&row6<n)&&(col6>=0&&col6<n)&&grid[row6][col6]==0&&(dis+1<dist[row6][col6]))
             {
            qu.push({dis+1,{row6,col6}});
            dist[row6][col6]=dis+1;
             }
             if((row7>=0&&row7<n)&&(col7>=0&&col7<n)&&grid[row7][col7]==0&&(dis+1<dist[row7][col7]))
             {
            qu.push({dis+1,{row7,col7}});
            dist[row7][col7]=dis+1;
             }
             if((row8>=0&&row8<n)&&(col8>=0&&col8<n)&&grid[row8][col8]==0&&(dis+1<dist[row8][col8]))
             {
            qu.push({dis+1,{row8,col8}});
            dist[row8][col8]=dis+1;
             }

        }
        if(dist[n-1][n-1]==1e9)
        return -1;
        return dist[n-1][n-1];


        
    }
};