class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int n=heights.size();
        int m=heights[0].size();
        vector<vector<int>>effort(n,vector<int>(m,1e9));
        effort[0][0]=0;
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>>qu;
      qu.push(make_pair(0, make_pair(0, 0)));

        int drow[]={0,0,1,-1};
        int dcol[]={-1,1,0,0};
        while(!qu.empty())
        {
            int eff=qu.top().first;
            int row=qu.top().second.first;
            int col=qu.top().second.second;
            qu.pop();
            for(int i=0;i<4;i++)
            {
                int nrow=row+drow[i];
                int ncol=col+dcol[i];
                if(nrow>=0&&nrow<n&&ncol>=0&&ncol<m)
                {
                    int neff=max(eff,abs(heights[row][col]-heights[nrow][ncol]));
                    if(neff<effort[nrow][ncol])
                    {
                        effort[nrow][ncol]=neff;
                        qu.push({neff,{nrow,ncol}});
                    }
                }
            }

        }
        return effort[n-1][m-1];

        
    }
};