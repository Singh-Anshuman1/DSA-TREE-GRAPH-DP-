class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        queue<pair<string,int>>qu;
        unordered_set<string>st(wordList.begin(),wordList.end());
        qu.push({beginWord,1});
        st.erase(beginWord);
        while(!qu.empty())
        {
            string word=qu.front().first;
            int index=qu.front().second;
            qu.pop();
            if(word==endWord)
            {
                return index;
            }
            for(int i=0;i<word.size();i++)
            {
                string original=word;
                for(char ch='a';ch<='z';ch++)
                {
                    word[i]=ch;
                    if(st.find(word)!=st.end())
                    {
                        qu.push({word,index+1});
                        st.erase(word);
                    }
                }
                word=original;
            }
        }
        return 0;
        
    }
};