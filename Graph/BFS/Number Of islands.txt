//  Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3



class Solution {
public:
void bfs(int row,int col,vector<vector<char>>& grid,vector<vector<int>>&vis)
{
    int n=grid.size();
    int m=grid[0].size();
    vis[row][col]=1;
    queue<pair<int,int>>q;
    q.push({row,col});
    while(!q.empty())
    {
        int row1=q.front().first;
        int col1=q.front().second;
        q.pop();
        // to traverse in the neighbours
        for(int del_row=-1;del_row<=1;del_row++)
        {
         for(int del_col=-1;del_col<=1;del_col++)  
         {
             if(del_row!=0 && del_col!=0) //skipping diagonal elements
             continue;
             int nrow=row1+del_row;
             int ncol=col1+del_col;
             if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]=='1'&& !vis[nrow][ncol])
             {
                 vis[nrow][ncol]=1;
                 q.push({nrow,ncol});
             }
         } 
        }


    }
}
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        int count=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
            if(!vis[i][j] && grid[i][j]=='1')
            {
                count++;
                bfs(i,j,grid,vis);
            }
        }
        }
        return count;

    }
};