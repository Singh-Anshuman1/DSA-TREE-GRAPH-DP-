class Solution {
public:
    
    int Ulti_parent(int node,vector<int>&parent)
    {
        if(node==parent[node])
        return node;
        return parent[node]=Ulti_parent(parent[node],parent);
    }
    void Union(int u,int v,vector<int>&parent,vector<int>&rank,int &extras)
    {
        int ultimate_parent_u=Ulti_parent(u,parent);
        int ultimate_parent_v=Ulti_parent(v ,parent);
        if(ultimate_parent_u==ultimate_parent_v)
        {
            extras++;
            return;
        }
        if(rank[ultimate_parent_u]<rank[ultimate_parent_v])
        parent[ultimate_parent_u]=ultimate_parent_v;
        else if(rank[ultimate_parent_u]>rank[ultimate_parent_v])
        parent[ultimate_parent_v]=ultimate_parent_u;
        else
        {
             parent[ultimate_parent_v]=ultimate_parent_u;
             rank[ultimate_parent_u]++;
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        vector<int>rank(n,0);
        vector<int>Ultimate_parent(n,0);
        for(int i=0;i<n;i++)
        {
            Ultimate_parent[i]=i;
        }
    
    int extras=0;
    for(int i=0;i<connections.size();i++)
    {
        Union(connections[i][0],connections[i][1],Ultimate_parent,rank,extras);
    }
    int components=0;
    for(int i=0;i<n;i++)
    {
        if(Ultimate_parent[i]==i)
        components++;
    }
    if(extras>=components-1)
    return components-1;
    else
    return -1;
    }
};