class Solution {
public:
    int findParent(int node,vector<int>&parent)
    {
        if(node==parent[node])
        return node;
        return parent[node]=findParent(parent[node],parent);
    }
    void unionBysize(int u,int v,vector<int>&parent,vector<int>&size)
    {
        int ulti_parent_u=findParent(u,parent);
        int ulti_parent_v=findParent(v,parent);
        if(ulti_parent_u==ulti_parent_v)
        return;
        if(size[ulti_parent_u]<size[ulti_parent_v])
        {
            parent[ulti_parent_u]=ulti_parent_v;
            size[ulti_parent_v]+=size[ulti_parent_u];
        }
        else
        {
            parent[ulti_parent_v]=ulti_parent_u;
            size[ulti_parent_u]+=size[ulti_parent_v];

        }
    }
    int removeStones(vector<vector<int>>& stones) {
        int maxrow=0;
        int maxcol=0;
        for(auto it:stones)
        {
            maxrow=max(maxrow,it[0]);
            maxcol=max(maxcol,it[1]);
        }
       
        vector<int>ulti_parent(maxrow+maxcol+3);
        for(int i=0;i<=maxrow+maxcol+2;i++)
        ulti_parent[i]=i;
        vector<int>size(maxrow+maxcol+3,1);
       
       for(auto it:stones)
       {
        int row=it[0];
        int col=maxrow+1+it[1];
        unionBysize(row,col,ulti_parent,size);
       }
        unordered_map<int,int>component;
        for(auto it:stones)
       {
        int row=it[0];
        int col=maxrow+1+it[1];
        component[row]=1;
        component[col]=1;

       }
       int cnt=0;
       for(auto it:component)
       {
        if(findParent(it.first,ulti_parent)==it.first)
        cnt++;
       }
       return stones.size()-cnt;
       
       

        
    }
};