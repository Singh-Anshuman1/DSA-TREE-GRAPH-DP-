class Solution {
public:
    // s1-s2=d
    //s1+s2=total_sum
    //s2=total_sum-s1
    //s1=(d+total_sum)/2
    //our question reduces to find no of subsets with target = s1
    int dynamic(vector<int>& nums, int target,int index,vector<vector<int>>&dp)
    {
        if(index==0)
        {
            if(target==0&&nums[0]==0)
            return 2;
            if(target==0||nums[0]==target)
            return 1;
            return 0;
        }
        if(dp[index][target]!=-1)
        return dp[index][target];
        int not_take=dynamic(nums,target,index-1,dp);
        int take=0;
        if(target>=nums[index])
        take=dynamic(nums,target-nums[index],index-1,dp);
        return dp[index][target]=take+not_take;

    }
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum=0;
        for(auto it:nums)
        sum+=it;
        if(target>sum||target<-sum||(target+sum)%2!=0)
        return 0;
        int t=target+sum;
        t=t/2;
        int n=nums.size();
        vector<vector<int>>dp(n+1,vector<int>(t+1,-1));
        return dynamic(nums,t,n-1,dp);


    }
};