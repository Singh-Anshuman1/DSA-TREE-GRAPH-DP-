//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends

// To find s1-s2=d
// s1=total_sum-s2
//  (total_sum-d)/2=s2
class Solution {
  public:
    int MOD=1e9+7;
    int dynamic(int n, int sum,vector<int>& arr,vector<vector<int>>&dp)
    {
        if(n==0)
        {
            if(arr[0]==0&&sum==0)
            return 2;
            if(sum==0||sum==arr[0])
            return 1;
            return 0;
        }
        if(dp[n][sum]!=-1)
        return dp[n][sum];
        int not_take=dynamic(n-1,sum,arr,dp);
        int take=0;
        if(arr[n]<=sum)
        take=dynamic(n-1,sum-arr[n],arr,dp);
        return dp[n][sum]=(take+not_take)%MOD;
        
    }
    int countPartitions(int n, int d, vector<int>& arr) {
        int total_sum=0;
        for(int i=0;i<n;i++)
        {
            total_sum+=arr[i];
        }
        int target=total_sum-d;
        if(target<0 || target%2)
        return false;
        target=target/2;
        vector<vector<int>>dp(n,vector<int>(target+1,-1));
        return dynamic(n-1,target,arr,dp);
        
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, d;
        cin >> n >> d;
        vector<int> arr;

        for (int i = 0; i < n; ++i) {
            int x;
            cin >> x;
            arr.push_back(x);
        }

        Solution obj;
        cout << obj.countPartitions(n, d, arr) << "\n";
    }
    return 0;
}
// } Driver Code Ends