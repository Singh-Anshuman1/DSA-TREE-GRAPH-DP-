class Solution {
public:
    int max1(vector<vector<int>>& grid,vector<vector<vector<int>>>&dp,int i,int j1,int j2)
    {
        if(j1<0||j1>=grid[0].size()||j2<0||j2>=grid[0].size())
        return -1e9;
        if(i==grid.size()-1) // when we reach the last row i.e the base case
        {
            if(j1==j2)
            return grid[i][j1];
            else
            return grid[i][j2]+grid[i][j1];
        }
        if(dp[i][j1][j2]!=-1)
        return dp[i][j1][j2];
        int maxi=0;
        for(int dj1=-1;dj1<=1;dj1++)
        {
            for(int dj2=-1;dj2<=1;dj2++)
            {
                int value=0;
                if(j1==j2)
                value=grid[i][j1];
                else
                value=grid[i][j1]+grid[i][j2];
                value=value+max1(grid,dp,i+1,j1+dj1,j2+dj2)     ;
                maxi=max(maxi,value);
                       }
        }
        return dp[i][j1][j2]= maxi;
        
        

    }
    int cherryPickup(vector<vector<int>>& grid) {
    int n=grid.size();
    int m=grid[0].size();
    vector<vector<vector<int>>>dp(n,vector<vector<int>>(m,vector<int>(m,-1)));
    return max1(grid,dp,0,0,m-1);

        
    }
};class Solution {
public:
    int max1(vector<vector<int>>& grid,vector<vector<vector<int>>>&dp,int i,int j1,int j2)
    {
        if(j1<0||j1>=grid[0].size()||j2<0||j2>=grid[0].size())
        return -1e9;
        if(i==grid.size()-1) // when we reach the last row i.e the base case
        {
            if(j1==j2)
            return grid[i][j1];
            else
            return grid[i][j2]+grid[i][j1];
        }
        if(dp[i][j1][j2]!=-1)
        return dp[i][j1][j2];
        int maxi=0;
        for(int dj1=-1;dj1<=1;dj1++)
        {
            for(int dj2=-1;dj2<=1;dj2++)
            {
                int value=0;
                if(j1==j2)
                value=grid[i][j1];
                else
                value=grid[i][j1]+grid[i][j2];
                value=value+max1(grid,dp,i+1,j1+dj1,j2+dj2)     ;
                maxi=max(maxi,value);
                       }
        }
        return dp[i][j1][j2]= maxi;
        
        

    }
    int cherryPickup(vector<vector<int>>& grid) {
    int n=grid.size();
    int m=grid[0].size();
    vector<vector<vector<int>>>dp(n,vector<vector<int>>(m,vector<int>(m,-1)));
    return max1(grid,dp,0,0,m-1);

        
    }
};