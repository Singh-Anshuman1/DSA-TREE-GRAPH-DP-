class Solution {
public:
    int dynamic(vector<vector<int>>&dp,int index1,int index2,string &text1,string &text2)
    {
        //base case (end of string)
        if(index1<0||index2<0)
        return 0;
        if(dp[index1][index2]!=-1)
        return dp[index1][index2];
        //if match of characters
        if(text1[index1]==text2[index2])
        return dp[index1][index2]= 1+dynamic(dp,index1-1,index2-1,text1,text2);
        //if characters not match
        else
         dp[index1][index2] =max(dynamic(dp,index1-1,index2,text1,text2),dynamic(dp,index1,index2-1,text1,text2));
        return dp[index1][index2] ;

    }
    int longestCommonSubsequence(string text1, string text2) {
        int n=text1.size();
        int m=text2.size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        int res= dynamic(dp,n-1,m-1,text1,text2);
        return res;
        
    }
};