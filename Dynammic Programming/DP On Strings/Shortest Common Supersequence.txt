class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int n=str1.size();
        int m=str2.size();
        // finding the length of longest common subsequense
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(str1[i-1]==str2[j-1])
                dp[i][j]=1+dp[i-1][j-1];
                else
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        //storing the shortest common supersequence
        string str3="";
        int i=n;
        int j=m;
        while(i>0 && j>0)
        {
            if(str1[i-1]==str2[j-1])
            {
                 str3=str1[i-1]+str3;
                i=i-1;
                j=j-1;
               
            }
            else if(dp[i-1][j]>dp[i][j-1])
            {
            str3=str1[i-1]+str3;
            i=i-1;
            }
            else
            {
            str3=str2[j-1]+str3;
            j=j-1;
            }
        }
        // if length of str1 is left
        while(i>0)
        {
            str3=str1[i-1]+str3;
            i--;
        }
      // if length of str2 is left
      while(j>0)
        {
            str3=str2[j-1]+str3;
            j--;
        }
        return str3;


        
    }
};