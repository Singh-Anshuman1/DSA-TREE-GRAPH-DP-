
int point( vector<vector<int>>&dp,int day,int last_task, vector<vector<int>>&points)
{
    if(day==0)  // base case
    {
        int maxi=0;
        for (int task = 0; task < 3; task++) {
          if (last_task != task)
            maxi = max(points[day][task], maxi);
          
        }
        return maxi;
    }
    if(dp[day][last_task]!=-1)  // memoization
    return dp[day][last_task];
    int maxi=0;
    for(int task=0;task<3;task++)
    {
        if (task != last_task) {
          int point1 = points[day][task] + point(dp, day - 1, task, points);
          maxi=max(point1,maxi);
        }
    }
    return dp[day][last_task]=maxi;
}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>>dp(n,vector<int>(4,-1));
    return point(dp,n-1,3,points);
    
}
int point( vector<vector<int>>&dp,int day,int last_task, vector<vector<int>>&points)
{
    if(day==0)  // base case
    {
        int maxi=0;
        for (int task = 0; task < 3; task++) {
          if (last_task != task)
            maxi = max(points[day][task], maxi);
          
        }
        return maxi;
    }
    if(dp[day][last_task]!=-1)  // memoization
    return dp[day][last_task];
    int maxi=0;
    for(int task=0;task<3;task++)
    {
        if (task != last_task) {
          int point1 = points[day][task] + point(dp, day - 1, task, points);
          maxi=max(point1,maxi);
        }
    }
    return dp[day][last_task]=maxi;
}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>>dp(n,vector<int>(4,-1));
    return point(dp,n-1,3,points);
    
}