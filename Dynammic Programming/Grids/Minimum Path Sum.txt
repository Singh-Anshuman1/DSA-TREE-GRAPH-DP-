// Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12


class Solution {
public:
    
    
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size(); //rows
        int m=grid[0].size(); //columns
        vector<vector<int>>dp(n,vector<int>(m,0)); // using bottom-top approach
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i==0&&j==0)
                dp[i][j]=grid[i][j];
                else
                {
                    int up=grid[i][j];
                    if(i>0)
                    up+=dp[i-1][j];
                    else
                    up+=1e9;
                    int left=grid[i][j];
                    if(j>0)
                    left+=dp[i][j-1];
                    else
                    left+=1e9;
                    dp[i][j]=min(left,up);
                }
               
            }
        }
         return dp[n-1][m-1];
    }
        
        
    
};


