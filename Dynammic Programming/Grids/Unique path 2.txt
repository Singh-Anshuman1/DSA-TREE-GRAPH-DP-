class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size();
        int m=obstacleGrid[0].size();
        if(obstacleGrid[0][0]==1)
        return 0;
        vector<vector<int>>dp(n,vector<int>(m,0));
            for(int j=0;j<m;j++)
            {
                if(obstacleGrid[0][j]==1)
                {
                dp[0][j]=0;  // if we encounter obstacle in 0th row itself we cant reach the next subsequent cells of that row
                break;
                }
                else
                dp[0][j]=1;
            }
            for(int i=0;i<n;i++)
            {
                if(obstacleGrid[i][0]==1)
                {
                dp[i][0]=0;  //if we encounter obstacle in 0th column we cant reach the next subsequent cells of that column
                break;
                }
                else
                dp[i][0]=1;
            }
            for(int i=1;i<n;i++)
            {
                for(int j=1;j<m;j++)
                {
                    if(obstacleGrid[i][j]==1)
                    dp[i][j]=0;
                    else
                    {
                        
                        dp[i][j]=dp[i-1][j]+dp[i][j-1];
                    }
                }

            }
            return dp[n-1][m-1];
        
    }
};