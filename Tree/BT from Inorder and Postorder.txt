/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        
        map<int,int>inMap;
        for(int i=0;i<inorder.size();i++)
        {
            inMap[inorder[i]]=i;

        }

        TreeNode* root=buildTree1(postorder,0,postorder.size()-1,inorder,0,inorder.size()-1,inMap);
        return root;
    }

    TreeNode* buildTree1(vector<int>& postorder,int poststart,int postend, vector<int>& inorder,int instart,int inend,map<int,int>&inMap)
    {
        if(instart>inend || poststart>postend)
        return NULL;
        TreeNode* root=new TreeNode(postorder[postend]);
        int inRoot=inMap[root->val];
        int numsLeft=inRoot-instart;
        root->left=buildTree1(postorder,poststart,poststart+numsLeft-1,inorder,instart,inRoot-1,inMap);
        root->right=buildTree1(postorder,poststart+numsLeft,postend-1,inorder,inRoot+1,inend,inMap);
        return root;
    }
};